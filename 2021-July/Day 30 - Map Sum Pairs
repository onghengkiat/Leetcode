struct TrieNode {
    TrieNode* child[26] = {};
    int sum = 0; // Store the sum of values of all strings go through this node.
};

class MapSum {
public:
    /** Initialize your data structure here. */
    
    unordered_map<string, int> map;
    TrieNode root;
    
    MapSum() {
    }
    
    void insert(const string& key, int val) {
        int diff = val - map[key];
        TrieNode* cur = &root;
        for (char c : key) {
            int charIdx = c - 'a';
            if (!cur -> child[charIdx]) cur -> child[charIdx] = new TrieNode();
            cur = cur -> child[charIdx];
            cur -> sum += diff;
        }
        map[key] = val;
    }
    int sum(const string& prefix) {
        TrieNode* cur = &root;
        for (char c : prefix) {
            int charIdx = c - 'a';
            if (!cur -> child[charIdx]) return 0;
            cur = cur -> child[charIdx];
        }
        return cur->sum;
    }
};


/**
 * Your MapSum object will be instantiated and called as such:
 * MapSum* obj = new MapSum();
 * obj->insert(key,val);
 * int param_2 = obj->sum(prefix);
 */
