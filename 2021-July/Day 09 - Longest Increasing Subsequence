class Solution {
public:
    // reference https://leetcode.com/problems/longest-increasing-subsequence/discuss/74848/9-lines-C%2B%2B-code-with-O(NlogN)-complexity
    /*
    Explanation of how it works by savvadia
    [1,2,7,8,3,4,5,9,0]
    1 -> [1]
    2 -> [1,2]
    7 -> [1,2,7]
    8 -> [1,2,7,8]
    3 -> [1,2,3,8]  // we replaced 7 with 3, since for the longest sequence we need only the last number and 1,2,3 is our new shorter sequence
    4 -> [1,2,3,4] // we replaced 8 with 4, since the max len is the same but 4 has more chances for longer sequence
    5 -> [1,2,3,4,5]
    9 -> [1,2,3,4,5,9]
    0 -> [0,2,3,4,5,9] // we replaced 1 with 0, so that it can become a new sequence
    */
    int lengthOfLIS(vector<int>& nums) {
        
        vector<int> ans;
        for(int i=0; i<nums.size(); i++) {
            auto it = lower_bound(ans.begin(), ans.end(), nums[i]);
            if(it == ans.end()) ans.push_back(nums[i]);
            else *it = nums[i];
        }
        return ans.size();
    }
};
