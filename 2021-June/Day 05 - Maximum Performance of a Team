class Solution {
public:
    int maxPerformance(int n, vector<int>& speed, vector<int>& efficiency, int k) {
        vector<pair<int, int>> p(n);
        for (int i = 0; i < n; ++i)
            p[i] = {efficiency[i], speed[i]};
        
        sort(p.begin(), p.end(), greater<pair<int, int>>());
        long speedSum = 0, maxPerf = 0;
        
        priority_queue <int, vector<int>, greater<int>> pq; 
        
        for(pair<int, int> cur : p){
            int eff = cur.first;
            int speed = cur.second;
            
            pq.push(speed);
            speedSum += speed;
            
            if (pq.size() > k) {
                speedSum -= pq.top();
                pq.pop();
            }
            
            maxPerf = max(maxPerf, speedSum * eff);
        }
        return (int)(maxPerf % 1000000007);
    }
};
