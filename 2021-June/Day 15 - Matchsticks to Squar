class Solution {
public:
    vector <int> sides {0, 0, 0, 0};
    
    bool makesquare(vector<int>& matchsticks) {
        
        int sum = 0;
        for (int num: matchsticks) {
            sum += num;
        }
        if (sum % 4 != 0) return false;
        
        // optional, but will shorten a lot the time required
        sort(matchsticks.begin(), matchsticks.end());
        
        int target = sum / 4;
        return recurse(matchsticks, matchsticks.size() - 1, target);
    }
    
    bool recurse(vector<int>& matchsticks, int index, int target) {
        if (index == -1) return true;
        
        for(int i = 0 ; i < 4 ; i ++){
            // skip the one side that already reaches the target OR
            // couldn't reach the target if current stick is added
            if(sides[i] + matchsticks[index] > target || sides[i] == target) continue;
            sides[i] += matchsticks[index];
            if (recurse(matchsticks, index - 1, target)) return true;
            else sides[i] -= matchsticks[index];
        }
        return false;
    }
    
};
