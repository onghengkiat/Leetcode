/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int preorderIdx;
    unordered_map <int,int> inorderIdxMapping;
    
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        preorderIdx = 0;
        for(int i = 0 ; i < inorder.size(); i++){
            inorderIdxMapping.insert({inorder[i], i});
        }
        
        return dfs(preorder, 0, preorder.size() - 1);
    }
    
    TreeNode* dfs(vector<int>& preorder, int left, int right) {
        if (left > right) return NULL;
        int preorderCur = preorder[preorderIdx];
        TreeNode* cur = new TreeNode(preorderCur);
        
        preorderIdx ++;
        
        int inorderCurIdx = inorderIdxMapping[preorderCur];
        cur -> left = dfs(preorder, left, inorderCurIdx - 1);
        cur -> right = dfs(preorder, inorderCurIdx + 1, right);
        return cur;
    }
};
