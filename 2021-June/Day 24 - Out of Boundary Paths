class Solution {
public:
    int findPaths(int m, int n, int maxMove, int startRow, int startColumn) {

        int mod = 1000000007;
        vector<vector<int>> dp (m, vector<int>(n, 0));
        dp[startRow][startColumn] = 1;
        int answer = 0;
        
        for (int move = 1; move <= maxMove; move++) {
            vector<vector<int>> temp (m, vector<int>(n, 0 ));
            for (int i = 0; i < m; i++) {
                for (int j = 0; j < n; j++) {
                    // update the number of paths for the ball to go out from the boundary based
                    // on the position of the balls in the previous round
                    if (i == m - 1) answer = (answer + dp[i][j]) % mod;
                    if (j == n - 1) answer = (answer + dp[i][j]) % mod;
                    if (i == 0) answer = (answer + dp[i][j]) % mod;
                    if (j == 0) answer = (answer + dp[i][j]) % mod;
                    
                    // update the number of paths for the ball to be at that point in this round
                    if (j > 0) temp[i][j] = (temp[i][j] + dp[i][j - 1]) % mod;
                    if (i > 0) temp[i][j] = (temp[i][j] + dp[i - 1][j]) % mod;
                    if (i < m - 1) temp[i][j] = (temp[i][j] + dp[i + 1][j]) % mod;
                    if (j < n - 1) temp[i][j] = (temp[i][j] + dp[i][j + 1]) % mod;
            }
          }
          dp = temp;
        }
        return answer;
    }
};
