/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
    vector<int> answer;
    vector<int> flipMatchVoyage(TreeNode* root, vector<int>& voyage) {
        
        if(root -> val != voyage[0]) return vector<int>(1,-1);
        if (dfs(root, 1,voyage) == -1) return vector<int>(1,-1);
        
        return answer;
    }
    
    void swap(TreeNode* node){
        TreeNode* temp = node -> left;
        node -> left = node -> right;
        node -> right = temp;
        
    }
    
    int dfs(TreeNode* cur, int index, vector<int>& voyage){
        if(index == -1) return -1;
        TreeNode* lf = cur -> left;
        TreeNode* rg = cur -> right;
        if(lf && rg){
            if(lf -> val != voyage[index]){
                if(rg -> val != voyage[index]) return -1;
                swap(cur);
                answer.push_back(cur->val);
                int idx = dfs(cur -> left, index+1, voyage);
                if(idx == -1) return -1;
                if(cur -> right -> val != voyage[idx]) return -1;
                return dfs(cur -> right, idx+1, voyage);
            }else{
                int idx = dfs(lf, index + 1, voyage);
                if(idx == -1) return -1;
                if(rg -> val != voyage[idx]) return -1;
                return dfs(rg , idx+1, voyage);
            }
            
        }else if(lf){
            if(lf -> val != voyage[index]) return -1;
            return dfs(lf, index + 1 , voyage);
        }else if(rg){
            if(rg -> val != voyage[index]) return -1;
            return dfs(rg,index + 1, voyage);
        }
        return index;
    }
};
