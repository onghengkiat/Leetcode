class Solution {
public:
    string intToRoman(int num) {
        unordered_map <int, char> value = {{1,'I'},{5,'V'},{10,'X'},{50,'L'},{100,'C'},{500,'D'},{1000,'M'}};
        string roman = "";
        int previous = 1000;
        
        while(num != 0){
            int temp = num;
            int digit = 0;
            while(temp != 0 ){ temp/= 10; digit ++;}
            int lastDigit = num/pow(10,digit-1);
            
            int prefix = 0;
            int suffix = 0;
            if(lastDigit == 9) {prefix = (int)pow(10,digit-1); suffix = (int)pow(10,digit);}
            else if(lastDigit >= 5) suffix = (int)5*pow(10,digit-1);
            else if(lastDigit == 4) {prefix = (int)pow(10,digit-1); suffix = (int)5*pow(10,digit-1); }
            else {suffix = (int)pow(10,digit-1);}
            
            if(prefix) {num += prefix; roman += value[prefix];}
            
            num -= suffix; roman += value[suffix];
        }
        return roman;
    }
};
