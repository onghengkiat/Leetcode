
class Node{
public:
    int val;
    Node* next;
    Node(int value){
        this -> val = value;
        this -> next = NULL;
    }    
};

class MyCircularQueue {
public:
    Node* head;
    Node* tail;
    int size ;
    int maxSize ;
    MyCircularQueue(int k) {
        this -> maxSize = k;
        this -> size = 0;
        head = NULL;
        tail = NULL;
    }
    
    bool enQueue(int value) {
        if(size >= maxSize) return false;
        
        if(head == NULL) {
            head = new Node(value);
            tail = head;
        }else if(head == tail){
            head -> next = new Node(value);
            tail = head -> next;
        }else{
            tail -> next = new Node(value);
            tail = tail->next;
        }
        
        size ++;
        return true;
    }
    
    bool deQueue() {
        
        if(head == NULL) return false;
        
        if(head == tail){
            
            head = NULL;
            tail = NULL;
        }else head = head -> next;
        size -- ;
        return true;
    }
    
    int Front() {
        if(head == NULL) return -1;
        return head -> val;
    }
    
    int Rear() {
        if(tail == NULL) return -1;
        return tail -> val;
    }
    
    bool isEmpty() {
        return !head;
    }
    
    bool isFull() {
        return size >= maxSize;
    }
};

/**
 * Your MyCircularQueue object will be instantiated and called as such:
 * MyCircularQueue* obj = new MyCircularQueue(k);
 * bool param_1 = obj->enQueue(value);
 * bool param_2 = obj->deQueue();
 * int param_3 = obj->Front();
 * int param_4 = obj->Rear();
 * bool param_5 = obj->isEmpty();
 * bool param_6 = obj->isFull();
 */
