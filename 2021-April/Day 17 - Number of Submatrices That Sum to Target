class Solution {
public:
    int numSubmatrixSumTarget(vector<vector<int>>& matrix, int target) {
        int rowSize = matrix.size() + 1;
        int colSize = matrix[0].size() + 1;
        vector<vector<int>> prefix(rowSize, vector<int>(colSize, 0));
        
        for(int i = 1 ; i < rowSize; i++){
            int curRowSum = 0;
            for(int j = 1 ; j < colSize; j++){
                curRowSum += matrix[i-1][j-1];
                prefix[i][j] = prefix[i-1][j] + curRowSum;
            }
        }
        int ans = 0;
        for (int i = 0; i < rowSize - 1 ; i++){
            
            for(int j = i+1 ; j < rowSize ; j++ ){
                map<int,int> mp ;
                mp[target] = 1;
                for (int z = 1 ; z < colSize ; z ++){
                    int temp = prefix[j][z] - prefix[i][z];
                    if (mp.find(temp) != mp.end()) ans += mp[temp];
                    temp += target;
                    if (mp.find(temp) != mp.end()) mp[temp] = mp[temp]+1;
                    else mp[temp] = 1;
                }
            }
        }
        
        return ans ;
        
    }
};
