class Solution {
public:
    int longestValidParentheses(string s) {
        stack <int> len;
        int open =0;
        for(char c : s){
            if(c == '(') {
                len.push(0);
                open ++;
            }else if(open > 0){
                open --;
                int l = 0;
                while(!len.empty() && len.top() !=0 ){
                    if(len.top() == -1) break;
                    l += len.top();
                    len.pop();
                 }
                if(!len.empty()){
                    l+= len.top();
                    len.pop();
                }
                len.push(l+1);
            }else{
                len.push(-1);
            }
        }
        
        
        int temp = 0,longest =0 ;
        while(!len.empty()){
            if(len.top() > 0 ) temp += len.top();
            else{
                longest = max(longest,temp);
                temp = 0;
            }
            len.pop();
        }
        longest = max(longest,temp);
        return longest*2;
    }
};
