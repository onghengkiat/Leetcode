
class Solution {
public :
    int longestStrChain(vector<string> &words) {
        unordered_map<string, int> wordChainLen;
        unordered_set<string> wordExist;
        
        for (string word : words) {
            wordExist.insert(word);
        }
        
        int ans = 0;
        for (string word : words) {
            ans = max(ans, dfs(wordExist, wordChainLen, word));
        }
        return ans;
    }
    
    int dfs(unordered_set<string> &wordExist, unordered_map<string, int> &wordChainLen, string currentWord) {
        if (wordChainLen.find(currentWord) != wordChainLen.end()) {
            return wordChainLen[currentWord];
        }
        int maxLength = 1;

        for (int i = 0; i < currentWord.length(); i++) {
            string newWord = currentWord.substr(0, i) + currentWord.substr(i + 1);
            if (wordExist.find(newWord) != wordExist.end()) {
                int currentLength = 1 + dfs(wordExist, wordChainLen, newWord);
                maxLength = max(maxLength, currentLength);
            }
        }
        wordChainLen[currentWord] = maxLength;

        return maxLength;
    }
};
