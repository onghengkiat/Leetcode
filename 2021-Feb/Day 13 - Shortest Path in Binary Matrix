class Solution {
public:
    int shortestPathBinaryMatrix(vector<vector<int>>& grid) {
        queue<pair<int, int>> lastStep;
        int distance = 0; 
        lastStep.push({0,0});
        
        int endX = grid.size() - 1;
        int endY = grid[0].size() - 1;
        
        while(!lastStep.empty()){
            distance++;
            cout << endl;
            int lastStepSize = lastStep.size();
            for(int i=0 ; i < lastStepSize; i ++){
                pair<int,int> current = lastStep.front();
                lastStep.pop();
                int x = current.first, y = current.second;
                if (grid[x][y] == 1) continue;
                
                if(x == endX && y == endY) return distance;
                
                //prevent from travelling back the same node
                grid[x][y] = 1;
                if(x != 0){
                    lastStep.push({x-1,y});
                    if(y != endY) lastStep.push({x-1,y+1});
                    if(y != 0 ) lastStep.push({x-1,y-1});
                }
                if(y != 0){
                    lastStep.push({x,y-1});
                    if(x != endX ) lastStep.push({x+1,y-1});
                }
                if(x != endX) {
                    lastStep.push({x+1,y});
                    if(y != endY) lastStep.push({x+1,y+1});
                }
                
                if(y != endY) lastStep.push({x, y+1});
            }
        }
     
        return -1;
    }
};
