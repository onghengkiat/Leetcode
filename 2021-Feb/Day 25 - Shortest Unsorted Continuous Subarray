class Solution {
public:
    int findUnsortedSubarray(vector<int>& nums) {
        stack<int> min_num;
        stack<int> max_num;
        int count = nums.size();
        min_num.push(nums[0]);
        bool pushing = true;
        for(int i = 1 ; i < count ; i++){
            if(min_num.top() > nums[i]){
                pushing = false;
                while(!min_num.empty()) {
                    if(min_num.top() > nums[i]) min_num.pop();
                    else break;
                }
                if(min_num.empty()) break;
            } 
            if(pushing) min_num.push(nums[i]);
        }
    
        int min_num_size = min_num.size();
        if(min_num_size == count) return 0 ;
        
        max_num.push(nums[count - 1]);
        pushing = true;
        for(int i  = count - 2; i >= 0; i--){
            if(i == min_num_size - 1) break;
            if(max_num.top() < nums[i]){
                pushing = false;
                while(!max_num.empty()) {
                    if(max_num.top() < nums[i]) max_num.pop();
                    else break;
                }
                if(max_num.empty()) break;
            } 
            if(pushing) max_num.push(nums[i]);
        }
        int max_num_size = max_num.size();
        
        return count - min_num_size - max_num_size;
    }
};
