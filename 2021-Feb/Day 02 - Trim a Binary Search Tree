/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* trimBST(TreeNode* root, int low, int high) {
        
        //finding for suitable root
        while(root){
            if(root->val > high){
                root = root->left;
            }else if(root->val < low){
                root = root->right;
            }else{
                break;
            }
        }
        if(!root)return NULL;
        
        //travel through the left side
        TreeNode* previousNode = root;
        TreeNode* node = root->left;
        while(node){
            if(node->val < low){
                node = node->right;
                previousNode->left = node;
                continue;
            }
            
            previousNode = node;
            node = node->left;
        }
        
        //travel through the right side
        previousNode = root;
        node = root->right;
        while(node){
            if(node->val > high){
                node = node->left;
                previousNode->right = node;
                continue;
            }
            
            previousNode = node;
            node = node->right;
        }
        return root;
    }
};
