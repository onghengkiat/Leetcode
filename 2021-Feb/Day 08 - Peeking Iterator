/*
 * Below is the interface for Iterator, which is already defined for you.
 * **DO NOT** modify the interface for Iterator.
 *
 *  class Iterator {
 *		struct Data;
 * 		Data* data;
 *		Iterator(const vector<int>& nums);
 * 		Iterator(const Iterator& iter);
 *
 * 		// Returns the next element in the iteration.
 *		int next();
 *
 *		// Returns true if the iteration has more elements.
 *		bool hasNext() const;
 *	};
 */

class PeekingIterator : public Iterator {
public:
    bool peaked ;
    int peakedElement;
	PeekingIterator(const vector<int>& nums) : Iterator(nums) {
	    // Initialize any member here.
	    // **DO NOT** save a copy of nums and manipulate it directly.
	    // You should only use the Iterator interface methods.
	    peaked = false;
	}
	
    // Returns the next element in the iteration without advancing the iterator.
	int peek() {
        if(!peaked)
            peakedElement = next();
        else
            return peakedElement;
        peaked = true;
        return peakedElement;
	}
    
    int next(){
        if(peaked){
            peaked =false;
            return peakedElement;
        }
        return Iterator::next();
    }
    
    bool hasNext() const{
        if(peaked)
            return true;
        return Iterator::hasNext();
    }

};
